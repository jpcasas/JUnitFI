package com.adecco.emea.projects;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Properties;
import java.util.UUID;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueReceiver;
import javax.jms.Session;
import javax.jms.TextMessage;



import com.tibco.tibjms.TibjmsConnectionFactory;

public class JMSClient {
	
	private static final CharSequence VAR_SERVIVE = "${service}";
	private static final CharSequence VAR_METHOD="${method}";
	private static JMSClient client;
	private Properties properties;
	private String serverUrl = "ems.url.ONLINE"; 
	private String userName  = "ems.username";
	private String password = "ems.password";
	private String QUEUE_REPONSE="ems.queue.reponse";
	private String message_model="ems.message.test";
	
	private QueueConnection connection;
	private QueueReceiver queueReceiver;
	private Queue queue;
	private TextMessage message;
	
	
	
	
	
	private Session queueSession;
	private Connection queueConnection;
	private TibjmsConnectionFactory queueFactory;
	
	
	

	public static JMSClient getClient() throws FileNotFoundException, IOException, JMSException {
		if(client==null){
			File file = new File("./sanitycheck.properties");
	    	Properties properties=new Properties();
	    	properties.load(new FileReader(file));
	    	client=new JMSClient();
	    	client.setProperties(properties);
	    	
		}
		return client;
	}

	

	



	private JMSClient() {
		super();
		
	}

	

	public String sendMessage(String topicName, String service, String method) throws JMSException {
	
		UUID uid= UUID.randomUUID();
		
		queueFactory = new TibjmsConnectionFactory(properties.getProperty(serverUrl));
		queueConnection  = queueFactory.createConnection(properties.getProperty(userName),properties.getProperty(password));
		queueSession = queueConnection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		
		Destination destination = queueSession.createQueue(topicName);
		Destination replyTo= queueSession.createQueue(properties.getProperty(QUEUE_REPONSE));
		
		MessageProducer messageProducer = queueSession.createProducer(destination);
		queueConnection.start();
		
		TextMessage msg;
		String message=properties.getProperty(message_model).replace(VAR_SERVIVE, service).replace(VAR_METHOD, method);
		msg = queueSession.createTextMessage();
		msg.setJMSDeliveryMode(DeliveryMode.NON_PERSISTENT);
		msg.setJMSExpiration(90000);
		msg.setJMSCorrelationID(uid.toString());
		msg.setJMSReplyTo(replyTo);
		msg.setText(message);
		System.out.println(uid);
		String messgeSelector = "JMSCorrelationID = '" + uid + "'";
		
		
		
		MessageConsumer replyConsumer = queueSession.createConsumer(replyTo,messgeSelector);
		messageProducer.send(msg, javax.jms.DeliveryMode.NON_PERSISTENT,   javax.jms.Message.DEFAULT_PRIORITY, 5000);
		
		Message replayMessage = replyConsumer.receive(20000);
		TextMessage textMessage = (TextMessage) replayMessage;

		String replayText="";
		if(textMessage!=null)
		replayText = textMessage.getText();
		
		queueConnection.close();
		
		return  replayText;

		
	}
	
	public String sendMessageReplay(String topicNameSend,String queueReponse, String message) throws JMSException {
		
		UUID uid= UUID.randomUUID();
		
		queueFactory = new TibjmsConnectionFactory(properties.getProperty(serverUrl));
		queueConnection  = queueFactory.createConnection(properties.getProperty(userName),properties.getProperty(password));
		queueSession = queueConnection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
		
		Destination destination = queueSession.createQueue(topicNameSend);
		Destination replyTo= queueSession.createQueue(queueReponse);
		
		MessageProducer messageProducer = queueSession.createProducer(destination);
		queueConnection.start();
		
		TextMessage msg;
		
		msg = queueSession.createTextMessage();
		msg.setJMSDeliveryMode(DeliveryMode.NON_PERSISTENT);
		msg.setJMSExpiration(90000);
		msg.setJMSCorrelationID(uid.toString());
		msg.setJMSReplyTo(replyTo);
		msg.setText(message);
		System.out.println(uid);
		String messgeSelector = "JMSCorrelationID = '" + uid + "'";
		
		
		
		MessageConsumer replyConsumer = queueSession.createConsumer(replyTo,messgeSelector);
		messageProducer.send(msg, javax.jms.DeliveryMode.NON_PERSISTENT,   javax.jms.Message.DEFAULT_PRIORITY, 5000);
		
		Message replayMessage = replyConsumer.receive(20000);
		TextMessage textMessage = (TextMessage) replayMessage;

		String replayText="";
		if(textMessage!=null)
		replayText = textMessage.getText();
		
		queueConnection.close();
		
		return  replayText;

		
	}
	

	public Properties getProperties() {
		return properties;
	}

	public void setProperties(Properties properties) {
		this.properties = properties;
	}

	public String getServerUrl() {
		return serverUrl;
	}

	public void setServerUrl(String serverUrl) {
		this.serverUrl = serverUrl;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getQUEUE_REPONSE() {
		return QUEUE_REPONSE;
	}

	public void setQUEUE_REPONSE(String qUEUE_REPONSE) {
		QUEUE_REPONSE = qUEUE_REPONSE;
	}

	public QueueConnection getConnection() {
		return connection;
	}

	public void setConnection(QueueConnection connection) {
		this.connection = connection;
	}

	public QueueReceiver getQueueReceiver() {
		return queueReceiver;
	}

	public void setQueueReceiver(QueueReceiver queueReceiver) {
		this.queueReceiver = queueReceiver;
	}

	public Queue getQueue() {
		return queue;
	}

	public void setQueue(Queue queue) {
		this.queue = queue;
	}

	public TextMessage getMessage() {
		return message;
	}

	public void setMessage(TextMessage message) {
		this.message = message;
	}
	

	public static void main(String args[]) throws FileNotFoundException, JMSException, IOException {
		LineNumberReader reader=new LineNumberReader(new FileReader("mensaje.xml"));
		StringBuffer buff=new StringBuffer();
		String string=null;
		while((string=reader.readLine())!=null){
			buff.append(string);
		}
		String val=JMSClient.getClient().sendMessageReplay("Q.CIO_MO_CNTMGT_PSJ.INT", "RESPUESTA",buff.toString());
		//String val=JMSClient.getClient().sendMessage("Q.CIO_MO_CNTMGT.INT.SANITY", "Contacts.V2","POST");
		System.out.println(val);
	}
}